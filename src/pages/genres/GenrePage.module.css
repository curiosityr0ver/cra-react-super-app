.page {
    display: flex;
    align-items: flex-start;
    overflow: hidden;
    width: 100%;
    height: 100vh;
    background-color: black;
}

.right {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: flex-end;
    padding-right: 8vw;
    width: 60%;
    height: 100%;
}



.nextPage button {}

.h1 {
    margin-top: 3rem;
    margin-bottom: 3rem;
    font-size: 1.875rem;
    line-height: 2.25rem;
    font-weight: 800;
    color: #FFFFFF;
}

h2 {
    font-size: 3.5rem;
    font-family: "Single Day", cursive;
    color: #72DB73;
}

span {
    color: #72DB73;
}


.left {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;
    width: 40%;
    height: 100%;
    color: white;
}

.left h1 {
    font-size: 2.5rem;
}

.chosen {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    /* background-color: pink; */
}

.chosenItem {
    display: flex;
    justify-content: space-between;
    flex: 0 0 calc(33.333% - 40px);
    padding: 8px 8px;
    background-color: #148a08;
    border-radius: 25px;
    margin: 2px;
}

/* Let's break down what each part of the flex property does:
flex-grow: This property defines the ability for a flex item to grow if necessary. It accepts a unitless value that determines the proportion of space an item should take up relative to other flex items in the same container. In this case,
flex-grow is set to 0,
which means the flex item won't grow beyond its initial size.

flex-shrink: This property defines the ability for a flex item to shrink if necessary. Similarly,
it accepts a unitless value representing the item's ability to shrink relative to other flex items. Setting it to 0 means the item won' t shrink. flex-basis: This property defines the initial size of the flex item before any free space is distributed according to the flex-grow and flex-shrink properties. Here,
it's set to calc(33.333% - 20px), which means each item initially takes up approximately one-third of the container' s width minus 20px for the margins. The calc() function allows you to perform calculations to determine the value. */

.grid {
    width: 70%;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    /* 3 columns each occupying equal space */
    grid-gap: 15px;
    /* Gap between grid items */
}

.gridItem {
    color: white;
    background-color: orange;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    height: 150px;
    width: 100%;
    padding: 5px 0px;
    /* Set height to maintain square shape */
}

.gridItem img {
    height: 70%;
    width: 95%;
}

.checkbox {
    margin-left: 25%;
}


.footer {
    font-size: 0.875rem;
    color: #7C7C7C;
    max-width: 50%;
}

button {
    all: unset;
    padding: 10px;
    margin: 0% 25%;
    width: 100%;
    border-radius: 20px;
    color: #FFFFFF;
    background-color: #72DB73;
    text-align: center;
}

/* .formContainer */